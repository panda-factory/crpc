/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: crpc_protobuf.proto */

#ifndef PROTOBUF_C_crpc_5fprotobuf_2eproto__INCLUDED
#define PROTOBUF_C_crpc_5fprotobuf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _CrpcMessageHead CrpcMessageHead;
typedef struct _CrpcMessageAck CrpcMessageAck;
typedef struct _CrpcCallbackRequest CrpcCallbackRequest;
typedef struct _CrpcCallbackResponse CrpcCallbackResponse;
typedef struct _CrpcCallbackRegister CrpcCallbackRegister;
typedef struct _CrpcCallbackRegisterReturn CrpcCallbackRegisterReturn;


/* --- enums --- */


/* --- messages --- */

struct  _CrpcMessageHead
{
  ProtobufCMessage base;
  uint32_t magic;
  uint32_t type;
  uint32_t msg_id;
  char *name;
};
#define CRPC_MESSAGE_HEAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crpc_message_head__descriptor) \
    , 0, 0, 0, NULL }


struct  _CrpcMessageAck
{
  ProtobufCMessage base;
  CrpcMessageHead *head;
  uint32_t result;
  char *description;
};
#define CRPC_MESSAGE_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crpc_message_ack__descriptor) \
    , NULL, 0, NULL }


struct  _CrpcCallbackRequest
{
  ProtobufCMessage base;
  CrpcMessageHead *head;
  uint32_t callback_id;
  protobuf_c_boolean has_parameters;
  ProtobufCBinaryData parameters;
};
#define CRPC_CALLBACK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crpc_callback_request__descriptor) \
    , NULL, 0, 0, {0,NULL} }


struct  _CrpcCallbackResponse
{
  ProtobufCMessage base;
  uint32_t callback_id;
  protobuf_c_boolean has_result;
  ProtobufCBinaryData result;
};
#define CRPC_CALLBACK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crpc_callback_response__descriptor) \
    , 0, 0, {0,NULL} }


struct  _CrpcCallbackRegister
{
  ProtobufCMessage base;
  uint32_t register_id;
};
#define CRPC_CALLBACK_REGISTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crpc_callback_register__descriptor) \
    , 0 }


struct  _CrpcCallbackRegisterReturn
{
  ProtobufCMessage base;
  uint32_t result;
};
#define CRPC_CALLBACK_REGISTER_RETURN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crpc_callback_register_return__descriptor) \
    , 0 }


/* CrpcMessageHead methods */
void   crpc_message_head__init
                     (CrpcMessageHead         *message);
size_t crpc_message_head__get_packed_size
                     (const CrpcMessageHead   *message);
size_t crpc_message_head__pack
                     (const CrpcMessageHead   *message,
                      uint8_t             *out);
size_t crpc_message_head__pack_to_buffer
                     (const CrpcMessageHead   *message,
                      ProtobufCBuffer     *buffer);
CrpcMessageHead *
       crpc_message_head__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crpc_message_head__free_unpacked
                     (CrpcMessageHead *message,
                      ProtobufCAllocator *allocator);
/* CrpcMessageAck methods */
void   crpc_message_ack__init
                     (CrpcMessageAck         *message);
size_t crpc_message_ack__get_packed_size
                     (const CrpcMessageAck   *message);
size_t crpc_message_ack__pack
                     (const CrpcMessageAck   *message,
                      uint8_t             *out);
size_t crpc_message_ack__pack_to_buffer
                     (const CrpcMessageAck   *message,
                      ProtobufCBuffer     *buffer);
CrpcMessageAck *
       crpc_message_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crpc_message_ack__free_unpacked
                     (CrpcMessageAck *message,
                      ProtobufCAllocator *allocator);
/* CrpcCallbackRequest methods */
void   crpc_callback_request__init
                     (CrpcCallbackRequest         *message);
size_t crpc_callback_request__get_packed_size
                     (const CrpcCallbackRequest   *message);
size_t crpc_callback_request__pack
                     (const CrpcCallbackRequest   *message,
                      uint8_t             *out);
size_t crpc_callback_request__pack_to_buffer
                     (const CrpcCallbackRequest   *message,
                      ProtobufCBuffer     *buffer);
CrpcCallbackRequest *
       crpc_callback_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crpc_callback_request__free_unpacked
                     (CrpcCallbackRequest *message,
                      ProtobufCAllocator *allocator);
/* CrpcCallbackResponse methods */
void   crpc_callback_response__init
                     (CrpcCallbackResponse         *message);
size_t crpc_callback_response__get_packed_size
                     (const CrpcCallbackResponse   *message);
size_t crpc_callback_response__pack
                     (const CrpcCallbackResponse   *message,
                      uint8_t             *out);
size_t crpc_callback_response__pack_to_buffer
                     (const CrpcCallbackResponse   *message,
                      ProtobufCBuffer     *buffer);
CrpcCallbackResponse *
       crpc_callback_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crpc_callback_response__free_unpacked
                     (CrpcCallbackResponse *message,
                      ProtobufCAllocator *allocator);
/* CrpcCallbackRegister methods */
void   crpc_callback_register__init
                     (CrpcCallbackRegister         *message);
size_t crpc_callback_register__get_packed_size
                     (const CrpcCallbackRegister   *message);
size_t crpc_callback_register__pack
                     (const CrpcCallbackRegister   *message,
                      uint8_t             *out);
size_t crpc_callback_register__pack_to_buffer
                     (const CrpcCallbackRegister   *message,
                      ProtobufCBuffer     *buffer);
CrpcCallbackRegister *
       crpc_callback_register__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crpc_callback_register__free_unpacked
                     (CrpcCallbackRegister *message,
                      ProtobufCAllocator *allocator);
/* CrpcCallbackRegisterReturn methods */
void   crpc_callback_register_return__init
                     (CrpcCallbackRegisterReturn         *message);
size_t crpc_callback_register_return__get_packed_size
                     (const CrpcCallbackRegisterReturn   *message);
size_t crpc_callback_register_return__pack
                     (const CrpcCallbackRegisterReturn   *message,
                      uint8_t             *out);
size_t crpc_callback_register_return__pack_to_buffer
                     (const CrpcCallbackRegisterReturn   *message,
                      ProtobufCBuffer     *buffer);
CrpcCallbackRegisterReturn *
       crpc_callback_register_return__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crpc_callback_register_return__free_unpacked
                     (CrpcCallbackRegisterReturn *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CrpcMessageHead_Closure)
                 (const CrpcMessageHead *message,
                  void *closure_data);
typedef void (*CrpcMessageAck_Closure)
                 (const CrpcMessageAck *message,
                  void *closure_data);
typedef void (*CrpcCallbackRequest_Closure)
                 (const CrpcCallbackRequest *message,
                  void *closure_data);
typedef void (*CrpcCallbackResponse_Closure)
                 (const CrpcCallbackResponse *message,
                  void *closure_data);
typedef void (*CrpcCallbackRegister_Closure)
                 (const CrpcCallbackRegister *message,
                  void *closure_data);
typedef void (*CrpcCallbackRegisterReturn_Closure)
                 (const CrpcCallbackRegisterReturn *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor crpc_message_head__descriptor;
extern const ProtobufCMessageDescriptor crpc_message_ack__descriptor;
extern const ProtobufCMessageDescriptor crpc_callback_request__descriptor;
extern const ProtobufCMessageDescriptor crpc_callback_response__descriptor;
extern const ProtobufCMessageDescriptor crpc_callback_register__descriptor;
extern const ProtobufCMessageDescriptor crpc_callback_register_return__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_crpc_5fprotobuf_2eproto__INCLUDED */
